= simple_form_for @post, html: { class: 'form-horizontal posts' }, multipart: true do |f|
  = f.error_notification
  = @post.errors.full_messages.inspect unless @post.errors.empty?

  = f.input :image_token, as: :fake, label: false, input_html: { class: 'hidden', value: @image_token }
  = f.input :title
  = error_span(@post[:title])
  = f.input :body
  = error_span(@post[:body])

  %div{ class: 'dropzone' }
    .dropzone-previews
  %div.pull-right.dropzone-action-buttons
    %a.start-upload
      %span.btn.btn-success.nohover
        = fa_icon 'cloud-upload'
        Start Upload
    %a.cancel-upload
      %span.btn.btn-warning.nohover
        = fa_icon 'ban'
        Cancel Upload

  = f.input :published
  = error_span(@post[:published])

  = f.button :submit, class: 'btn-primary'
  = link_to t('.cancel', default: t("helpers.links.cancel")), posts_path, class: 'btn btn-default'

:javascript
  $(document).ready(function() {
    Dropzone.autoDiscover = false;
    var dz = new Dropzone('.dropzone', {
      url: '/posts/upload_image',
      previewsContainer: '.dropzone-previews',
      addRemoveLinks: true,
      uploadMultiple: true,
      paramName1: 'post[images_attributes]',
      paramName2: '[source]',
      autoQueue: false,
      acceptedFiles: 'image/jpeg, image/jpg, image/png, image/gif',
      dictDefaultMessage: '<i class="fa fa-picture-o" aria-hidden="true"></i> Click or Drop files here to upload',
      dictRemoveFile: '\<i class="fa fa-trash" aria-hidden="true"\>\</i\>'
    });

    var auth_token = $('meta[name=csrf-token]').attr('content');
    var image_token = '#{raw(@image_token)}';
    dz.on('sending', function(file, xhr, formData) {
      formData.append('authenticity_token', auth_token);
      formData.append('image_token', image_token);
    });

    document.querySelector('.start-upload').onclick = function() {
      dz.enqueueFiles(dz.getFilesWithStatus(Dropzone.ADDED));
    };

    document.querySelector('.cancel-upload').onclick = function() {
      console.log(dz.files);
      $.each(dz.files, function(k, v) {
        if (v.hasOwnProperty('status') && v.status !== 'success') {
          dz.removeFile(v);
        }
      });
    };

    dz.on('removedfile', function(file) {
      $.ajax({
        url: '/posts/remove_image',
        type: 'DELETE',
        data: {
          image_token: image_token,
          source_file_name: file.name
        }
      });
    });

    var images = '#{raw(@images)}';
    if (images !== '') {
      images = JSON.parse('#{raw(@images)}');
      for (var img in images) {
        var mockFile = { name: images[img].file_name, size: images[img].size };
        dz.emit('addedfile', mockFile);
        dz.emit('thumbnail', mockFile, images[img].img_url);
        dz.emit('complete', mockFile);
        dz.files.push(mockFile);
      }
    }
  });
