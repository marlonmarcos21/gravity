- is_remote = false if local_assigns[:is_remote].blank?

= simple_form_for @post, remote: is_remote, html: { class: 'form-horizontal posts' }, multipart: true do |f|
  = f.error_notification
  = @post.errors.full_messages.inspect unless @post.errors.empty?

  = f.input :image_token, as: :fake, label: false, input_html: { class: 'hidden', value: @image_token }
  = f.input :body, label: false, placeholder: "#{current_user.first_name}, What's happening?", input_html: { rows: 3, cols: 120 }
  = error_span(@post[:body])

  %div{ class: 'dropzone' }
    .dropzone-previews
  %div.pull-right.dropzone-action-buttons
    %a.start-upload
      %span.btn.btn-default
        = fa_icon 'cloud-upload'
        Start Upload
    %a.cancel-upload
      %span.btn.btn-danger
        = fa_icon 'ban'
        Cancel Upload

  .form-actions
    = f.button :submit, class: 'btn-primary'
    - if @post.persisted?
      = link_to 'Cancel', post_path(@post), class: 'btn btn-default'
    - elsif current_page?('/posts')
      = link_to 'Cancel', '', class: 'btn btn-default cancel-post'
    - else
      = link_to 'Cancel', posts_path, class: 'btn btn-default'

- content_for :footer_scripts do
  :javascript
    $(document).ready(function() {
      var editor = new wysihtml5.Editor('post_body');

      $('a.cancel-post').click(function(e) {
        e.preventDefault();
        editor.clear();
        editor.setValue("#{raw(current_user.first_name)}, What's happening?", true);
      });

      Dropzone.autoDiscover = false;
      var dz = new Dropzone('.dropzone', {
        url: '/posts/upload_image',
        previewsContainer: '.dropzone-previews',
        addRemoveLinks: true,
        uploadMultiple: true,
        paramName1: 'post[images_attributes]',
        paramName2: '[source]',
        autoQueue: false,
        acceptedFiles: 'image/jpeg, image/jpg, image/png, image/gif',
        dictDefaultMessage: '<i class="fa fa-picture-o" aria-hidden="true"></i> Click or Drop photos here to upload',
        dictRemoveFile: '\<i class="fa fa-trash" aria-hidden="true"\>\</i\>'
      });

      var auth_token = $('meta[name=csrf-token]').attr('content');
      var image_token = '#{raw(@image_token)}';
      dz.on('sending', function(file, xhr, formData) {
        formData.append('authenticity_token', auth_token);
        formData.append('image_token', image_token);
      });

      document.querySelector('.start-upload').onclick = function() {
        dz.enqueueFiles(dz.getFilesWithStatus(Dropzone.ADDED));
      };

      document.querySelector('.cancel-upload').onclick = function() {
        $.each(dz.files, function(k, v) {
          if (v.hasOwnProperty('status') && v.status !== 'success') {
            dz.removeFile(v);
          }
        });
      };

      dz.on('removedfile', function(file) {
        $.ajax({
          url: '/posts/remove_image',
          type: 'DELETE',
          data: {
            image_token: image_token,
            source_file_name: file.name
          }
        });
      });

      var images = '#{raw(@images)}';
      if (images !== '') {
        images = JSON.parse('#{raw(@images)}');
        for (var img in images) {
          var mockFile = { name: images[img].file_name, size: images[img].size };
          dz.emit('addedfile', mockFile);
          dz.emit('thumbnail', mockFile, images[img].img_url_thumb);
          dz.emit('complete', mockFile);
          dz.files.push(mockFile);
        }
      }
    });
