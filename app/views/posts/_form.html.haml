- is_remote = false if local_assigns[:is_remote].blank?

= simple_form_for @post, remote: is_remote, html: { class: 'form-horizontal posts' }, multipart: true do |f|
  = f.error_notification
  = @post.errors.full_messages.inspect unless @post.errors.empty?

  = f.input :media_token, as: :fake, label: false, input_html: { class: 'hidden', value: @media_token }
  = f.input :body, label: false, placeholder: "#{current_user.first_name}, What's happening?", input_html: { rows: 3, cols: 120 }

  .dropzone
    .dropzone-previews

  = f.input :public, hint: 'Public posts can be viewed by everyone'

  .form-actions
    = f.button :submit, class: 'btn-primary'
    - if @post.persisted?
      = link_to 'Cancel', post_path(@post), class: 'btn btn-default'
    - else
      = link_to 'Cancel', '', class: 'btn btn-default cancel-post'

- content_for :footer_scripts do
  :javascript
    $(document).ready(function() {
      const mediaToken = '#{raw(@media_token)}';
      const wysi = $('textarea#post_body').wysihtml5();
      const editor = $('#post_body').data('wysihtml5').editor;

      let postReady = false;
      const form = $('form#new_post');
      form.submit(function(e) {
        const value = editor.getValue().replace(/&nbsp;/g, '').trim();
        if (!value) {
          e.preventDefault();
          html = '<div class="modal" id="confirmationDialog"><a data-dismiss="modal" class="blank-post btn btn-modal-close btn-xs">×</a><div class="modal-body"><p>Post is blank, it defeats its purpose in life!</p></div></div>';
          $(html).modal();
          return false;
        }

        const image_count = $('.dropzone-previews').children('.dz-image-preview').length;
        if (image_count === 0) {
          return true;
        }
        if (postReady === false) {
          $.ajax({
            url: '/posts/pre_post_check',
            data: {
              media_token: mediaToken,
            },
          }).done(function(data) {
            postReady = data.ready;
          });
        }

        if (postReady === true) {
          return true;
        } else {
          e.preventDefault();
          html = '<div class="modal" id="confirmationDialog"><a data-dismiss="modal" class="blank-post btn btn-modal-close btn-xs">×</a><div class="modal-body"><p>Images/Videos are still being processed, please try again in a few seconds...</p></div></div>';
          $(html).modal();
          return false;
        }
      });

      Dropzone.autoDiscover = false;
      const dz = new Dropzone('.dropzone', {
        url: '#',
        previewsContainer: '.dropzone-previews',
        addRemoveLinks: true,
        uploadMultiple: false,
        parallelUploads: 1,
        paramName1: 'file',
        paramName2: [],
        method: 'post',
        maxFilesize: 10000,
        acceptedFiles: 'image/jpeg, image/jpg, image/png, image/gif, video/mp4, video/quicktime',
        dictDefaultMessage: '<i class="fa fa-picture-o" aria-hidden="true"></i> Click or Drop photos/videos here to upload',
        dictRemoveFile: '\<i class="fa fa-trash" aria-hidden="true"\>\</i\>',
        headers: {'Accept': '*/*'},
        accept: function(file, cb) {
          $.ajax({
            url: '/posts/presigned_url',
            dataType: 'json',
          }).done(function(data) {
            file.uploadURL = data.url;
            file.uploadFields = data.fields;
            file.UUID = data.uuid;
            cb();
          });
        },
      });

      dz.on('processing', function(file) {
        $('input[name=commit]').attr('disabled', true);
        dz.options.url = file.uploadURL;
      });

      dz.on('sending', function(file, xhr, formData) {
        $('input[name=commit]').attr('disabled', true);
        for (const field in file.uploadFields) {
          formData.append(field, file.uploadFields[field]);
        }
        formData.append('Content-Type', file.type);
      });

      dz.on('addedfile', function(file) {
        $('input[name=commit]').attr('disabled', true);
      });

      dz.on('uploadprogress', function(file) {
        $('input[name=commit]').attr('disabled', true);
      });

      dz.on('complete', function(file) {
        $('input[name=commit]').removeAttr('disabled');
      });

      dz.on('success', function(file, resp) {
        const parser = new DOMParser();
        const xmlDoc = parser.parseFromString(resp, 'text/xml');
        const key = xmlDoc.getElementsByTagName('Key')[0].childNodes[0].nodeValue;
        $.ajax({
          url: '/posts/media_upload_callback',
          data: {
            media_token: mediaToken,
            s3_key: key,
            content_type: file.type,
          },
        });
      });

      let didRemoveFiles = false;
      let s3KeysfilesRemoved = [];
      const postId = '#{raw(@post.id)}';
      dz.on('removedfile', function(file) {
        if (postId === '') {
          $.ajax({
            url: '/posts/remove_media',
            type: 'DELETE',
            data: {
              media_token: mediaToken,
              s3_key: `images/${file.UUID}/${file.name}`,
            }
          });
        } else {
          didRemoveFiles = true;
          s3KeysfilesRemoved.push(`images/${file.UUID}/${file.name}`);
        }
      });

      let images = '#{raw(@images)}';
      if (images !== '') {
        images = JSON.parse('#{raw(@images)}');
        for (const img in images) {
          const mockFile = {name: images[img].file_name, size: images[img].size};
          dz.emit('addedfile', mockFile);
          dz.emit('thumbnail', mockFile, images[img].img_url_thumb);
          dz.emit('complete', mockFile);
          dz.files.push(mockFile);
        }
      }

      $('a.cancel-post').click(function(e) {
        e.preventDefault();
        editor.clear();
        editor.setValue("#{raw(current_user.first_name)}, What's happening?", true);
        $.each(dz.files, function(k, v) {
          dz.removeFile(v);
        });
        $('html, body').animate({
          scrollTop: 0
        }, 0);
        $('input[name=commit]').removeAttr('disabled');
        $(this).css('background-color', 'transparent');
        $(this).css('color', '#00868B');
        $(this).on('mouseenter', function() {
          $(this).css('background-color', '#00868B');
          $(this).css('color', '#fff');
        });
        $(this).on('mouseleave', function() {
          $(this).css('background-color', 'transparent');
          $(this).css('color', '#00868B');
        });
      });

      if (postId !== '') {
        $('input[name=commit]').click(function(e) {
          e.preventDefault();
          if (didRemoveFiles) {
            $.ajax({
              url: '/posts/remove_media',
              type: 'DELETE',
              data: {
                media_token: mediaToken,
                s3_key: s3KeysfilesRemoved,
              }
            });
          }
          $(`#edit_post_${postId}`).submit();
        });
      }
    });
